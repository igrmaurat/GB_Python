
Логика


1.

Запускаем сервер с параметрами (хост, порт)


2.
Запускаем клиентов с параметрами - user_name, (хост, порт)


3.
Сервер получает user_name - фиксирует user_name, ip, время обращения в таблицу подключений db_table_connect


4.
Клиент подключается к серверу.

- производит подключение к серверу. Передает имя и сообщение jim_presence из файла jim_message.py. Предварительно конвертируем сообщение из словаря в байты
  с помощью функции to_bytes из модуля jim_to_bytes.py

4.1 Сообщение клиенту от клиента
- передает user_name_client - от кого,
- user_name_adressat - кому пишет сообщение - список адресатов
- текст сообщения. Сообщение также конвертируется в байты.


5.
Сервер получает сообщение:
- Фиксирует в базу в таблицу db_table_messages - от кого (user_id), кому (список user_id), текст сообщения
- Отправляет клиенту техническое сообщение - что все ок.
- отправляет всем адресатам сообщение и от кого оно.


6.
Клиенты которые слушают - получают сообщение. Выводят текст сообщения в терминале.

Дальше кто-то отвечает (шаг 4) и повторяются шаги 5-6


Структура


Модуль сервер - server.py
Модуль клиент - read_client.py и write_client.py - затем объединить в один модуль client.py
Модуль сообщение - функции передачи имени пользователя в jim-сообщение - name_message.py
Модуль протокол jim - словари сообщений - jim_message.py
Модуль конвертации байтов в словари и обратно - jim_to_bytes.py

База данных (пока db_api, потом alchemy)
- таблица данных пользователя table_users (user_id, user_name, name)
- таблица логов сеансов table_sessions(session_id, user_id, время подключения, client_ip)
- таблица контактов table_contacts (user_id)















